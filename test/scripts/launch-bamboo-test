#!/bin/bash
#set -v
#Get the Test dir from the build Plan Name or from command line

set -o pipefail

TOP_DIR=`pwd`

#export PEGASUS_USER_METRICS_SERVER="http://butterfly.isi.edu/metrics"

# The first argument is the build plan name which contains
# plan/branch information. We are only interested in the
# last part of this name which is the test name.
TEST=`echo $1 | sed -r 's/.*Build and Test - ([0-9\.]+ - ){0,1}//' | awk '{ print $1; }'`
shift

TEST_DIR=test/core/$TEST
if [ ! -d "$TEST_DIR" ]; then
    echo "Test Directory does not exist. Probably the test $TEST is not checked in the branch"
    echo "Exiting with status 0 "
    exit 0
fi
cd $TEST_DIR

echo "TEST is $TEST"
pwd

PLANFILE=`mktemp plan.XXXXXX`

#add common properties to pegasusrc
if [ -e pegasusrc ]; then
    echo "" >> pegasusrc
    cat ../common.properties >> pegasusrc
else
    echo "Warning: Test $TEST not setup with pegasusrc file"
fi

#Launch the test
./run-bamboo-test "$@" 2>&1 | tee $PLANFILE

STATUS=$?
if [ $STATUS != 0 ]; then
   echo "Workflow submission failed"
   exit $STATUS
fi

# check for bad planner outputs
if  grep -v 'I am: hostname:' $PLANFILE | grep 'ERROR'  >/dev/null 2>&1; then
    echo "The planner logged a line with the string 'ERROR'"
    exit 1
fi

#Get RUNDIR from the planning output
RUN_DIR=`grep pegasus-remove $PLANFILE | sed 's/.*pegasus-remove //'`
if [ "x$RUN_DIR" = "x" ]; then

    # if the workflow was planned with out --submit, it only has a pegasus-run line
    RUN_DIR=`grep pegasus-run $PLANFILE | sed 's/.*pegasus-run //'`

    if [ "x$RUN_DIR" = "x" ]; then
        echo "Unable to determine the RUN_DIR from the planner output - did the planner fail?" 1>&2
        exit 1
    fi
fi

echo "RUNDIR is $RUN_DIR"

# Change in to the rundir
cd $RUN_DIR

#Check status
$TOP_DIR/test/common/check-status
STATUS=$?

# PM-974
# make sure there is only stampede database created per hierarchal workflow
COUNT=`find . -name "*stampede.db" | grep -c stampede.db`
if [ $COUNT -ne "1" ]; then
    echo "ERROR: more than one stampede db in test $COUNT" 1>&2
    exit 1
fi


# always pegasus-analyzer to detect other problems
pegasus-analyzer $RUN_DIR
STATUS=$(($STATUS + $?))

# PM-956 also run pegasus-analyzer on any sub workflows
# PM-1390 -not -name ignores any hidden pegasus multipart dirs that
# may have been created . for e.g. .pegasus.mulitpart.d
for subdir in `find $RUN_DIR -type d -name "*.*" -not -name '.*'`; do
    pegasus-analyzer --top-dir $RUN_DIR $subdir
    STATUS=$(($STATUS + $?))
done

if [ $STATUS = 0 ]; then
   # Run Pegasus Statistics
   pegasus-statistics -s all -f text $RUN_DIR
   pegasus-statistics -s all -f csv  $RUN_DIR
   STATUS=$(($STATUS + $?))
fi

cd $RUN_DIR

# monitord checks
if [ ! -e monitord.done ]; then
    echo "monitord.done does not exist - did monitord finish successfully?"
    STATUS=$(($STATUS + 1))
fi

LOG_COUNT=`ls monitord.log* 2>/dev/null | wc -l`
if [ $LOG_COUNT -lt 1 -o $LOG_COUNT -gt 1 ]; then
    echo "$LOG_COUNT monitord log files found - did monitord restart?"
    STATUS=$(($STATUS + 1))
fi

if cat monitord.log | grep -E '(:ERR:)|(:CRITICAL:)' >/dev/null 2>&1; then
    echo "monitord log contains errors:"
    echo
    grep -E '(:ERR:)|(:CRITICAL:)' monitord.log
    echo
    STATUS=$(($STATUS + 1))
fi

if cat monitord.log | grep -v "DAGMan was aborted for workflow" | grep WARN | grep -v -E '(read_stdout_stderr_files)|(unable to read error file)|(unable to read output file)|(truncating std)|(Skipping container verification)|(unable to verify container)|(exists and is already owned by user)|(signature not found for object group)|(Skipping container verification)' >/dev/null 2>&1; then
    echo "monitord log contains warnings:"
    echo
    grep WARN monitord.log
    echo
    STATUS=$(($STATUS + 1))
fi

# check for metrics file consistency with submit files
METRICS_FILE=`ls *.metrics 2>/dev/null|  grep -v dag.metrics`
METRICS_TOTAL_JOBS=`grep total_jobs $METRICS_FILE | sed -E "s/.*\"total_jobs\": //"`
NUM_SUBMIT_FILES=`find . -maxdepth 3 -name "*sub"  2>/dev/null| grep -v condor.sub | wc -l | sed -E "s/\s//"`
NUM_JOBS_IN_DAG=`grep -E "^JOB" *dag | wc -l`
if [ $METRICS_TOTAL_JOBS -ne $NUM_JOBS_IN_DAG ]; then
    echo "Test failed, the number of jobs $NUM_JOBS_IN_DAG in dag file does not match total_jobs value $METRICS_TOTAL_JOBS in metrics file $METRICS_FILE found in $RUN_DIR"
    STATUS=$(($STATUS + 1))
fi

#Check exitcode log file
$TOP_DIR/test/scripts/parse-exitcode-json
STATUS=$(($STATUS + $?))


if [ $STATUS -ne 0 ]; then
    echo "Test failed, creating tarball..."
    DIR="/scitech/shared/scratch-90-days/pegasus-failures"
    if ! [ -d "$DIR" ]; then
        mkdir -p "$DIR"
        chmod 1777 "$DIR"
    fi
    TARFILE=$(mktemp $DIR/pegasus-failure-XXXXXX.tar.gz)
    tar czf $TARFILE $RUN_DIR 2>&1
    chmod 0644 $TARFILE
    echo "Created tarball $TARFILE"
else
    # clean up pegasus install and tarballs to save disk space
    cd $TOP_DIR
    rm -rf pegasus tests.tar
fi


if [ $STATUS != 0 ]; then
   echo "ERROR: Test failed" 1>&2
   exit $STATUS
fi

exit

